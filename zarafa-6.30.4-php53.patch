Patch by Robert Scheck <robert@fedoraproject.org> for Zarafa >= 6.30.4, which fixes building of the PHP
extension of Zarafa with PHP >= 5.3.0. It is heavily based on the work of "sweetsinse" from the Zarafa
Forum for Archlinux, but with the difference, that it is backwards compatible, too. The original patch
from "sweetsinse" makes the PHP extension of Zarafa only PHP >= 5.3.0 compileable. Fedora 12+ will ship
PHP >= 5.3.0, so the changes are here mandatory.

 - http://aur.archlinux.org/packages/zarafa-server/zarafa-server/php-5.3.0-changes.patch
 - http://forums.zarafa.com/viewtopic.php?f=9&p=15289

--- zarafa-6.30.4/php-ext/ECImportContentsChangesProxy.cpp		2009-10-16 21:05:18.000000000 +0200
+++ zarafa-6.30.4/php-ext/ECImportContentsChangesProxy.cpp.php53	2009-10-25 15:36:06.000000000 +0100
@@ -101,7 +101,11 @@
 ECImportContentsChangesProxy::ECImportContentsChangesProxy(zval *lpObj TSRMLS_DC) {
     this->m_cRef = 1; // Object is in use when created!
     this->m_lpObj = lpObj;
+#if ZEND_MODULE_API_NO >= 20071006
+    Z_ADDREF_P(m_lpObj);
+#else
     ZVAL_ADDREF(m_lpObj);
+#endif
 #ifdef ZTS
 	this->TSRMLS_C = TSRMLS_C;
 #endif
--- zarafa-6.30.4/php-ext/ECImportHierarchyChangesProxy.cpp		2009-10-16 21:05:18.000000000 +0200
+++ zarafa-6.30.4/php-ext/ECImportHierarchyChangesProxy.cpp.php53	2009-10-25 15:35:13.000000000 +0100
@@ -98,7 +98,11 @@
 ECImportHierarchyChangesProxy::ECImportHierarchyChangesProxy(zval *lpObj TSRMLS_DC) {
     this->m_cRef = 1; // Object is in use when created!
     this->m_lpObj = lpObj;
+#if ZEND_MODULE_API_NO >= 20071006
+    Z_ADDREF_P(m_lpObj);
+#else
     ZVAL_ADDREF(m_lpObj);
+#endif
 #ifdef ZTS
 	this->TSRMLS_C = TSRMLS_C;
 #endif
--- zarafa-6.30.4/php-ext/main.cpp					2009-10-16 21:05:18.000000000 +0200
+++ zarafa-6.30.4/php-ext/main.cpp.php53				2009-10-25 15:37:27.000000000 +0100
@@ -167,6 +167,20 @@
 #define RETVAL_ZVAL(zv, copy, dtor)            ZVAL_ZVAL(return_value, zv, copy, dtor)
 #endif
 
+// No more define with PHP 5.3.0
+#if ZEND_MODULE_API_NO >= 20071006
+ZEND_BEGIN_ARG_INFO(first_arg_force_ref, 0)
+        ZEND_ARG_PASS_INFO(1)
+ZEND_END_ARG_INFO();
+
+ZEND_BEGIN_ARG_INFO(fourth_arg_force_ref, 0)
+        ZEND_ARG_PASS_INFO(0)
+        ZEND_ARG_PASS_INFO(0)
+        ZEND_ARG_PASS_INFO(0)
+        ZEND_ARG_PASS_INFO(1)
+ZEND_END_ARG_INFO();
+#endif
+
 
 // A very, very nice PHP #define that causes link errors in MAPI when you have multiple
 // files referencing MAPI....
